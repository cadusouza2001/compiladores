/* Arquivo: FoolParser.cup */
/*
 * Carlos Souza e Murilo Schuck
 * Compiladores - Trabalho GA2
 */

parser code {:
  public static void main(String[] args) throws Exception {
    FoolLexer lexer = new FoolLexer(new java.io.FileReader(args[0]));

    FoolParser parser = new FoolParser(lexer);
    parser.parse();
  }
:};

/* Declaração dos Terminais */
terminal CLASS, INT, BOOL, VOID, IF, ELSE, RETURN, TRUE, FALSE, NOT, AND, OR;
terminal EQ, NEQ, LT, GT, PLUS, TIMES, ASSIGN;
terminal LPAREN, RPAREN, LBRACE, RBRACE, SEMICOLON, COMMA;
terminal IDENTIFIER, INT_CONST;

/* Declaração dos Não Terminais */
non terminal program;
non terminal class_decl;
non terminal method_decl;
non terminal attr_decl;
non terminal attr_decls;
non terminal method_decls;
non terminal type;
non terminal expr;
non terminal command;
non terminal command_list;
non terminal argument_list;
non terminal if_command;
non terminal else_command;

/* Precedências */
precedence left ELSE;
precedence left PLUS, TIMES;
precedence left AND, OR;
precedence left EQ, NEQ, LT, GT; 

/* Regras de Produção */
program ::= class_decl;                 

class_decl ::= CLASS IDENTIFIER LBRACE attr_decls method_decls RBRACE;  

attr_decls ::= /* vazio */
            | attr_decls attr_decl;

method_decls ::= /* vazio */
              | method_decl method_decls;

attr_decl ::= type IDENTIFIER SEMICOLON;

method_decl ::= type IDENTIFIER LPAREN argument_list RPAREN LBRACE command_list RBRACE;

argument_list ::= /* vazio */
               | argument_list COMMA type IDENTIFIER
               | type IDENTIFIER;

command_list ::= /* vazio */
              | command_list command;

command ::= IDENTIFIER ASSIGN expr SEMICOLON
          | if_command
          | RETURN expr SEMICOLON;

if_command ::= IF LPAREN expr RPAREN command
             | IF LPAREN expr RPAREN command ELSE command;


else_command ::= /* vazio */
               | ELSE command;

expr ::= expr PLUS expr
       | expr TIMES expr
       | expr EQ expr
       | expr NEQ expr
       | expr LT expr
       | expr GT expr
       | NOT expr
       | expr AND expr
       | expr OR expr
       | IDENTIFIER
       | INT_CONST
       | TRUE
       | FALSE;

type ::= INT
       | BOOL
       | VOID;
